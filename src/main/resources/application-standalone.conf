include "kamon"

akka {
  stdout-loglevel = "OFF"
  loglevel = "OFF"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on
}

akka.management {
  http {
    hostname = "0.0.0.0"
    route-providers-read-only = false
  }

  health-checks {
    readiness-checks {
      ready = "it.pagopa.interop.partyprocess.server.impl.HealthCheck"
    }
    liveness-checks {
      live = "it.pagopa.interop.partyprocess.server.impl.LiveCheck"
    }
  }
}



party-process {
  port = 8088
  confirm-token-timeout = "45 seconds"
  signature-validation-enabled = true
  signature-validation-enabled = ${?SIGNATURE_VALIDATION_ENABLED}
  user-registry-api-key = ${USER_REGISTRY_API_KEY}
  destination-mails= ${?DESTINATION_MAILS}
  eu_list_of_trusted_lists_url = ${EU_LIST_OF_TRUSTED_LISTS_URL}
  eu_official_journal_url = ${EU_OFFICIAL_JOURNAL_URL}

  jwt {
    audience = ${?ACCEPTED_AUDIENCES}
  }

  storage {
    container = "local"
  }

  mail-template {
    path = "src/test/resources/mail-template.json"
    onboarding-mail-placeholders {
      userName = "requesterName"
      userSurname = "requesterSurname"
      userTaxCode = "requesterTaxCode"
      productId = "productId"
      productName = "productName"
      confirm-token {
          name = "confirmTokenURL"
          name = ${?MAIL_CONFIRM_PLACEHOLDER_NAME}
          placeholder = "https://gateway.interop.pdnd.dev/ui/conferma-registrazione?jwt="
          placeholder = ${?MAIL_ONBOARDING_CONFIRMATION_LINK}
      }
      reject-token {
          name = "rejectTokenURL"
          name = ${?MAIL_REJECT_PLACEHOLDER_NAME}
          placeholder = "https://gateway.interop.pdnd.dev/ui/cancella-registrazione?jwt="
          placeholder = ${?MAIL_ONBOARDING_CONFIRMATION_LINK}
      }
      institution-info {
        institutionType = "overriding-institutionType"
        description = "overriding-description"
        digitalAddress = "overriding-digitalAddress"
        address = "overriding-address"
        taxCode = "overriding-taxCode"
        zipCode = "overriding-zipCode"
      }
      billing {
        pricingPlan = "billing-pricingPlan"
        vatNumber = "billing-vatNumber"
        recipientCode = "billing-recipientCode"
      }
    }
  }

  services {
    party-management = "http://localhost:8088"
    party-management = ${?PARTY_MANAGEMENT_URL}
    party-proxy = "http://localhost:8088"
    party-proxy = ${?PARTY_PROXY_URL}
    user-registry-management = "http://localhost:8088"
    user-registry-management = ${?USER_REGISTRY_MANAGEMENT_URL}
  }

}

interop-commons {
  storage {
    type = "File"
    endpoint = "local"
    application {
      id = "local"
      secret = "local"
    }
  }

  mail {
    sender = ${SMTP_USR}
    smtp {
      server = ${SMTP_HOST}
      port = ${SMTP_PORT}
      user = ${SMTP_USR}
      password = ${SMTP_PSW}
      ssl = true
    }
  }

  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}


akka.http {
  server {
    pipelining-limit = 128 # default 1
    pipelining-limit = ${?PIPELINING_LIMIT}
    backlog = 100 # default 100
    backlog = ${?BACKLOG_SIZE}
  }

  host-connection-pool {
    max-connections = 16
    max-connections = ${?CONNECTION_POOL_MAX_CONNECTIONS}
    min-connections = 2
    min-connections = ${?CONNECTION_POOL_MIN_CONNECTIONS}
    max-open-requests = 256
    max-open-requests = ${?CONNECTION_POOL_MAX_OPEN_REQUESTS}
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 4
    core-pool-size-factor = 1.0
    core-pool-size-max = 16
    max-pool-size-min = 4
    max-pool-size-factor = 1.0
    max-pool-size-max = 16
  }
  throughput = 1
  throughput = ${?BLOCKING_DISPATCHER_THROUGHPUT}
}