include "kamon"

akka {
  stdout-loglevel = "OFF"
  loglevel = "OFF"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on
  management {
    http {
      hostname = "0.0.0.0"
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.partyprocess.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.partyprocess.server.impl.LiveCheck"
      }
    }
  }
}

party-process {
  port = 8088
  confirm-token-timeout = "90 seconds"
  confirm-token-timeout = ${?CONFIRM_TOKEN_TIMEOUT}
  signature-validation-enabled = true
  signature-validation-enabled = ${?SIGNATURE_VALIDATION_ENABLED}
  user-registry-api-key = ${USER_REGISTRY_API_KEY}
  external-api-key = ${EXTERNAL_API_KEY}
  external-api-user = ${EXTERNAL_API_USER}
  destination-mails= ${?DESTINATION_MAILS}
  eu_list_of_trusted_lists_url = ${EU_LIST_OF_TRUSTED_LISTS_URL}
  eu_official_journal_url = ${EU_OFFICIAL_JOURNAL_URL}

  jwt {
    audience = ${?ACCEPTED_AUDIENCES}
  }

  storage {
    container = ${STORAGE_CONTAINER}
  }

  logo {
    path = ${PAGOPA_LOGO_URL}
  }

  mail-template {
    onboarding_send_email_to_institution     = ${ONBOARDING_SEND_EMAIL_TO_INSTITUTION}
    onboarding_institution_alternative_email = ${ONBOARDING_INSTITUTION_ALTERNATIVE_EMAIL}

    onboarding-mail-placeholders {
      path = ${MAIL_TEMPLATE_PATH}
      userName = "requesterName"
      userSurname = "requesterSurname"
      userTaxCode = "requesterTaxCode"
      productId = "productId"
      productName = "productName"
      confirm-token {
        name = "confirmTokenURL"
        name = ${?MAIL_CONFIRM_PLACEHOLDER_NAME}
        placeholder = ${MAIL_ONBOARDING_CONFIRMATION_LINK}
      }
      reject-token {
        name = "rejectTokenURL"
        name = ${?MAIL_REJECT_PLACEHOLDER_NAME}
        placeholder = ${MAIL_ONBOARDING_REJECTION_LINK}
      }
      institution-info {
        institutionType = "overriding-institutionType"
        description = "overriding-description"
        digitalAddress = "overriding-digitalAddress"
        address = "overriding-address"
        zipCode = "overriding-zipCode"
        taxCode = "overriding-taxCode"
      }
      billing {
        pricingPlan = "billing-pricingPlan"
        vatNumber = "billing-vatNumber"
        recipientCode = "billing-recipientCode"
      }
    }

    onboarding-complete-mail-placeholders {
      path = ${MAIL_TEMPLATE_COMPLETE_PATH}
      selfcare {
        name = "selfcareURL"
        placeholder = ${SELFCARE_URL}
      }
      productName = "productName"
    }
    onboarding-notification-mail-placeholders {
      adminEmail = ${ADDRESS_EMAIL_NOTIFICATION_ADMIN}
      path = ${MAIL_TEMPLATE_NOTIFICATION_PATH}
      confirm-token {
        name = "confirmTokenURL"
        placeholder = ${SELFCARE_ADMIN_NOTIFICATION_URL}
      }
      productName = "productName"
      requesterName = "requesterName"
      requesterSurname = "requesterSurname"
      institutionName = "institutionName"
      institutionGeoTaxonomies = "institutionGeoTaxonomies"
    }
    onboarding-reject-mail-placeholders {
      path = ${MAIL_TEMPLATE_REJECT_PATH}
      productName = "productName"
      onboardingUrlPlaceholder = "onboardingUrl"
      onboardingUrlValue = ${MAIL_ONBOARDING_URL}
    }
    onboarding-auto-complete {
      path = ${?MAIL_TEMPLATE_AUTO_COMPLETE_PATH}
    }
  }

  services {
    party-management = ${PARTY_MANAGEMENT_URL}
    party-proxy = ${PARTY_PROXY_URL}
    user-registry-management = ${USER_REGISTRY_MANAGEMENT_URL}
    product-management = ${?PRODUCT_MANAGEMENT_URL}
    geo-taxonomy = ${?GEO_TAXONOMY_URL}
  }

  aruba {
    serviceUrl = ${ARUBA_SIGN_SERVICE_BASE_URL}
    typeOtpAuth = ${ARUBA_SIGN_SERVICE_IDENTITY_TYPE_OTP_AUTH}
    otpPwd = ${ARUBA_SIGN_SERVICE_IDENTITY_OTP_PWD}
    user = ${ARUBA_SIGN_SERVICE_IDENTITY_USER}
    delegatedUser = ${ARUBA_SIGN_SERVICE_IDENTITY_DELEGATED_USER}
    delegatedPassword = ${ARUBA_SIGN_SERVICE_IDENTITY_DELEGATED_PASSWORD}
    delegatedDomain = ${ARUBA_SIGN_SERVICE_IDENTITY_DELEGATED_DOMAIN}
  }

  pagopaSignature {
    enabled = true
    enabled = ${?PAGOPA_SIGNATURE_ENABLED}
    signer = ${PAGOPA_SIGNATURE_SIGNER}
    location = ${PAGOPA_SIGNATURE_LOCATION}

    apply {
      onboarding {
        enabled = true
        enabled = ${?PAGOPA_SIGNATURE_ONBOARDING_ENABLED}
        templateReason = ${PAGOPA_SIGNATURE_ONBOARDING_REASON_TEMPLATE}
      }
    }
  }
}

interop-commons {
  storage {
    type = ${STORAGE_TYPE}
    endpoint = ${STORAGE_ENDPOINT}
    application {
      id = ${STORAGE_CREDENTIAL_ID}
      secret = ${STORAGE_CREDENTIAL_SECRET}
    }
  }

  mail {
    sender = ${SMTP_USR}
    smtp {
      server = ${SMTP_HOST}
      port = ${SMTP_PORT}
      user = ${SMTP_USR}
      password = ${SMTP_PSW}
      ssl = ${?SMTP_SSL}
    }
  }

  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}

akka.http {
  server {
    pipelining-limit = 128 # default 1
    pipelining-limit = ${?PIPELINING_LIMIT}
    backlog = 100 # default 100
    backlog = ${?BACKLOG_SIZE}
  }

  host-connection-pool {
    max-connections = 16
    max-connections = ${?CONNECTION_POOL_MAX_CONNECTIONS}
    min-connections = 2
    min-connections = ${?CONNECTION_POOL_MIN_CONNECTIONS}
    max-open-requests = 256
    max-open-requests = ${?CONNECTION_POOL_MAX_OPEN_REQUESTS}
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 4
    core-pool-size-factor = 1.0
    core-pool-size-max = 16
    max-pool-size-min = 4
    max-pool-size-factor = 1.0
    max-pool-size-max = 16
  }
  throughput = 1
  throughput = ${?BLOCKING_DISPATCHER_THROUGHPUT}
}